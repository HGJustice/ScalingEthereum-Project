// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ridePosted extends ethereum.Event {
  get params(): ridePosted__Params {
    return new ridePosted__Params(this);
  }
}

export class ridePosted__Params {
  _event: ridePosted;

  constructor(event: ridePosted) {
    this._event = event;
  }

  get rideid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pickup(): string {
    return this._event.parameters[1].value.toString();
  }

  get destination(): string {
    return this._event.parameters[2].value.toString();
  }

  get date(): string {
    return this._event.parameters[3].value.toString();
  }

  get time(): string {
    return this._event.parameters[4].value.toString();
  }

  get passengers(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get driver(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class seatBought extends ethereum.Event {
  get params(): seatBought__Params {
    return new seatBought__Params(this);
  }
}

export class seatBought__Params {
  _event: seatBought;

  constructor(event: seatBought) {
    this._event = event;
  }

  get rideid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pickup(): string {
    return this._event.parameters[2].value.toString();
  }

  get destination(): string {
    return this._event.parameters[3].value.toString();
  }

  get time(): string {
    return this._event.parameters[4].value.toString();
  }

  get seatsAvaiable(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get currentPassengers(): Array<Address> {
    return this._event.parameters[6].value.toAddressArray();
  }
}

export class RideManegement__ridesResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: string;
  value4: string;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: string,
    value2: string,
    value3: string,
    value4: string,
    value5: BigInt,
    value6: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getPickup(): string {
    return this.value1;
  }

  getDestination(): string {
    return this.value2;
  }

  getDate(): string {
    return this.value3;
  }

  getPickupTime(): string {
    return this.value4;
  }

  getNumOfSeatsAvaiable(): BigInt {
    return this.value5;
  }

  getPrice(): BigInt {
    return this.value6;
  }
}

export class RideManegement__usersRidesResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: string;
  value4: string;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: string,
    value2: string,
    value3: string,
    value4: string,
    value5: BigInt,
    value6: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getPickup(): string {
    return this.value1;
  }

  getDestination(): string {
    return this.value2;
  }

  getDate(): string {
    return this.value3;
  }

  getPickupTime(): string {
    return this.value4;
  }

  getNumOfSeatsAvaiable(): BigInt {
    return this.value5;
  }

  getPrice(): BigInt {
    return this.value6;
  }
}

export class RideManegement extends ethereum.SmartContract {
  static bind(address: Address): RideManegement {
    return new RideManegement("RideManegement", address);
  }

  convertTest(amount: BigInt): BigInt {
    let result = super.call("convertTest", "convertTest(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBigInt();
  }

  try_convertTest(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertTest",
      "convertTest(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentrideID(): BigInt {
    let result = super.call("currentrideID", "currentrideID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentrideID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentrideID",
      "currentrideID():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rides(param0: BigInt): RideManegement__ridesResult {
    let result = super.call(
      "rides",
      "rides(uint256):(uint256,string,string,string,string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new RideManegement__ridesResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBigInt(),
      result[6].toBigInt(),
    );
  }

  try_rides(param0: BigInt): ethereum.CallResult<RideManegement__ridesResult> {
    let result = super.tryCall(
      "rides",
      "rides(uint256):(uint256,string,string,string,string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RideManegement__ridesResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBigInt(),
        value[6].toBigInt(),
      ),
    );
  }

  userContract(): Address {
    let result = super.call("userContract", "userContract():(address)", []);

    return result[0].toAddress();
  }

  try_userContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("userContract", "userContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usersRides(param0: Address): RideManegement__usersRidesResult {
    let result = super.call(
      "usersRides",
      "usersRides(address):(uint256,string,string,string,string,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new RideManegement__usersRidesResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBigInt(),
      result[6].toBigInt(),
    );
  }

  try_usersRides(
    param0: Address,
  ): ethereum.CallResult<RideManegement__usersRidesResult> {
    let result = super.tryCall(
      "usersRides",
      "usersRides(address):(uint256,string,string,string,string,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RideManegement__usersRidesResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBigInt(),
        value[6].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get userManagementAddy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyRideCall extends ethereum.Call {
  get inputs(): BuyRideCall__Inputs {
    return new BuyRideCall__Inputs(this);
  }

  get outputs(): BuyRideCall__Outputs {
    return new BuyRideCall__Outputs(this);
  }
}

export class BuyRideCall__Inputs {
  _call: BuyRideCall;

  constructor(call: BuyRideCall) {
    this._call = call;
  }

  get chosenRide(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyRideCall__Outputs {
  _call: BuyRideCall;

  constructor(call: BuyRideCall) {
    this._call = call;
  }
}

export class CreateRideCall extends ethereum.Call {
  get inputs(): CreateRideCall__Inputs {
    return new CreateRideCall__Inputs(this);
  }

  get outputs(): CreateRideCall__Outputs {
    return new CreateRideCall__Outputs(this);
  }
}

export class CreateRideCall__Inputs {
  _call: CreateRideCall;

  constructor(call: CreateRideCall) {
    this._call = call;
  }

  get _pickup(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _destination(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _date(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _time(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _seats(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateRideCall__Outputs {
  _call: CreateRideCall;

  constructor(call: CreateRideCall) {
    this._call = call;
  }
}
